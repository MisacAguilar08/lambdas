AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for API Gateway with Lambda functions and Custom JWT Authorizer.
  Includes token generation, authorization, and protected endpoints.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment stage for deployment
  AuthTokenSecret:
    Type: String
    NoEcho: true
    Description: Secret key used for JWT token generation and validation (minimum 8 characters)
    MinLength: 6
    MaxLength: 512

Globals:
  Function:
    Runtime: python3.11
    Architectures:
      - x86_64
    Timeout: 30
    MemorySize: 256
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: lambda_service
        LOG_LEVEL: INFO

  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
    Auth:
      DefaultAuthorizer: CustomAuthorizer
      Authorizers:
        CustomAuthorizer:
          FunctionArn: !GetAtt CustomAuthorizerFunction.Arn
          FunctionPayloadType: TOKEN
          Identity:
            Header: Authorization
            ValidationExpression: '^Bearer [-0-9a-zA-Z\._]*$'
            ReauthorizeEvery: 300

Resources:
  CommonDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-dependencies
      Description: Common dependencies for all Lambda functions
      ContentUri: layers/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Delete

  TokenTimeParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${AWS::StackName}/auth/token/time'
      Type: String
      Value: '3600'
      Description: Token expiration time in seconds
      Tier: Standard
      DataType: text

  CustomAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-custom-authorizer
      Description: JWT token validator for API authorization
      CodeUri: src/authorizer/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonDependenciesLayer
      Environment:
        Variables:
          AUTH_TOKEN_SECRET: !Ref AuthTokenSecret
          SSM_TOKEN_TIME_PATH: !Sub '/${AWS::StackName}/auth/token/time'
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - 'ssm:GetParameter'
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/auth/token/time'
            - Effect: Allow
              Action:
                - 'execute-api:Invoke'
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*'

  TokenGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-token-generator
      Description: Generates JWT tokens for API authentication
      CodeUri: src/token_generator/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonDependenciesLayer
      Environment:
        Variables:
          AUTH_TOKEN_SECRET: !Ref AuthTokenSecret
          POWERTOOLS_SERVICE_NAME: token_generator
          SSM_TOKEN_TIME_PATH: !Sub '/${AWS::StackName}/auth/token/time'
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - 'ssm:GetParameter'
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/auth/token/time'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /token
            Method: post
            Auth:
              Authorizer: NONE

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-hello-world
      Description: Sample protected endpoint that requires authentication
      CodeUri: src/hello_world/
      Handler: app.lambda_handler
      Layers:
        - !Ref CommonDependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /hello
            Method: get
            Auth:
              Authorizer: NONE

  ProcessDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-process-data
      Description: Data processing endpoint with higher resource allocation
      CodeUri: src/process_data/
      Handler: app.lambda_handler
      MemorySize: 512
      Timeout: 60
      Layers:
        - !Ref CommonDependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /process
            Method: post

  RegisterPayment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-register-payment
      Description: Register payment processing function
      CodeUri: src/payment/
      Handler: register_payment.lambda_handler
      MemorySize: 512
      Timeout: 60
      Layers:
        - !Ref CommonDependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /register-payment
            Method: post

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"

  LayerArn:
    Description: ARN of the common dependencies layer
    Value: !Ref CommonDependenciesLayer

  LayerVersion:
    Description: Latest version of the common dependencies layer
    Value: !Ref CommonDependenciesLayer

  HelloWorldArn:
    Description: ARN of the Hello World Lambda function
    Value: !GetAtt HelloWorldFunction.Arn

  ProcessDataArn:
    Description: ARN of the Process Data Lambda function
    Value: !GetAtt ProcessDataFunction.Arn

  AuthorizerArn:
    Description: ARN of the Custom Authorizer Lambda function
    Value: !GetAtt CustomAuthorizerFunction.Arn

  TokenGeneratorArn:
    Description: ARN of the Token Generator Lambda function
    Value: !GetAtt TokenGeneratorFunction.Arn

  RegisterPaymentArn:
    Description: ARN of the Register Payment Lambda function
    Value: !GetAtt RegisterPayment.Arn