name: Deploy Lambda

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'layers/**'
      - 'template.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'layers/**'
      - 'template.yaml'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      debug:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements.txt
            layers/requirements.txt

      - name: Cache SAM builds
        uses: actions/cache@v3
        with:
          path: |
            .aws-sam
            ~/.aws-sam
          key: ${{ runner.os }}-sam-${{ hashFiles('**/*.py', 'template.yaml', 'layers/requirements.txt', 'src/**') }}
          restore-keys: |
            ${{ runner.os }}-sam-${{ hashFiles('template.yaml') }}
            ${{ runner.os }}-sam-

      - name: Cache system dependencies
        uses: actions/cache@v3
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('**/deploy-lambda.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev tree

      - name: Install AWS SAM CLI and build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          python -m pip install aws-sam-cli

      - name: Verify Project Structure
        run: |
          echo "üîç Verificando estructura del proyecto..."
          if [ ! -d "layers" ]; then
            echo "‚ùå Error: Directorio 'layers' no encontrado"
            exit 1
          fi
          if [ ! -d "layers/python" ]; then
            echo "üìÅ Creando directorio layers/python..."
            mkdir -p layers/python
          fi
          if [ ! -f "layers/requirements.txt" ]; then
            echo "‚ùå Error: Archivo layers/requirements.txt no encontrado"
            exit 1
          fi
          echo "üìã Estructura del proyecto:"
          tree -a -I '.git|.aws-sam'

      - name: Build Lambda Layer
        run: |
          echo "üî® Building Lambda Layer..."
          pip install -r layers/requirements.txt -t layers/python/
          if [ -f "Makefile" ]; then
            make build-layer
          fi

      - name: Install Development Dependencies
        run: |
          echo "üì¶ Instalando dependencias de desarrollo..."
          python -m pip install pytest flake8 black safety

      # - name: Run Python Tests
      #   run: |
      #     echo "üß™ Ejecutando pruebas..."
      #     python -m pytest tests/ -v || {
      #       echo "‚ùå Tests failed. Check the test output above."
      #       exit 1
      #     }

      # - name: Check Python Code Style
      #   run: |
      #     echo "üîç Verificando estilo de c√≥digo..."
      #     flake8 src/ layers/ || {
      #       echo "‚ùå Flake8 encontr√≥ problemas de estilo. Por favor, corr√≠gelos."
      #       exit 1
      #     }
      #     black --check src/ layers/ || {
      #       echo "‚ùå Black encontr√≥ problemas de formato. Por favor, ejecuta 'black' localmente."
      #       exit 1
      #     }

      - name: Check for vulnerabilities
        run: |
          echo "üîí Verificando vulnerabilidades conocidas..."
          safety check || {
            echo "‚ö†Ô∏è Se encontraron vulnerabilidades de seguridad. Revisa el reporte."
            exit 1
          }

      - name: Validate SAM template
        run: |
          echo "üìù Validando template SAM..."
          sam validate --lint

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          permissions-boundary: ${{ secrets.AWS_PERMISSIONS_BOUNDARY }}

      - name: Set Environment Variables
        run: |
          echo "STACK_NAME=lambdas-init-${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_ENV
          echo "DEPLOY_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV

      - name: Check and Delete Failed Stack
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} 2>/dev/null | grep -q 'ROLLBACK_COMPLETE'; then
            echo "üóëÔ∏è Eliminando stack fallido anterior..."
            aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
            aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
          fi

      - name: SAM Build
        run: |
          echo "üî® Iniciando SAM build..."
          sam build --use-container
          echo "‚úÖ SAM build completado. Contenido de .aws-sam:"
          ls -la .aws-sam/

      - name: Enable Debug Mode
        if: ${{ github.event.inputs.debug == 'true' }}
        run: |
          echo "üêõ Modo debug activado"
          set -x

      - name: SAM Deploy
        run: >
          sam deploy
          --template-file .aws-sam/build/template.yaml
          --stack-name ${{ env.STACK_NAME }}
          --no-confirm-changeset
          --no-fail-on-empty-changeset
          --force-upload
          --no-progressbar
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
          --region "${{ secrets.AWS_REGION }}"
          --resolve-s3
          --parameter-overrides "AuthTokenSecret=${{ secrets.AUTH_TOKEN_SECRET }}"
          --tags "Environment=${{ env.ENVIRONMENT }}"
          --tags "Project=lambdas-init"
          --tags "DeployTimestamp=${{ env.DEPLOY_TIMESTAMP }}"
          --tags "ManagedBy=GitHub-Actions"
              LastDeployedBy=${{ github.actor }} \
              LastDeployedAt=${{ env.DEPLOY_TIMESTAMP }} \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              AuthTokenSecret=${{ secrets.AUTH_TOKEN_SECRET }}

      - name: Monitor Deployment
        run: |
          MAX_RETRIES=6
          RETRY_INTERVAL=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            STACK_STATUS=$(aws cloudformation describe-stacks \
              --stack-name ${{ env.STACK_NAME }} \
              --query 'Stacks[0].StackStatus' \
              --output text)
            
            echo "üîÑ Estado actual del stack (intento $((RETRY_COUNT + 1))/$MAX_RETRIES): $STACK_STATUS"
            
            if [[ "$STACK_STATUS" == *"COMPLETE"* && "$STACK_STATUS" != *"ROLLBACK"* ]]; then
              echo "‚úÖ ¬°Despliegue exitoso!"
              
              echo "üìã Outputs del stack:"
              aws cloudformation describe-stacks \
                --stack-name ${{ env.STACK_NAME }} \
                --query 'Stacks[0].Outputs' \
                --output table
              
              echo "üîç Verificando recursos desplegados..."
              
              echo "üìä Funciones Lambda:"
              aws lambda list-functions \
                --query "Functions[?contains(FunctionName, '${{ env.STACK_NAME }}')].[FunctionName,Runtime,LastModified]" \
                --output table
              
              echo "üåê APIs Gateway (si existen):"
              aws apigateway get-rest-apis \
                --query "items[?contains(name, '${{ env.STACK_NAME }}')].[name,id,createdDate]" \
                --output table || true
              
              echo "üíæ Tablas DynamoDB (si existen):"
              aws dynamodb list-tables \
                --query "TableNames[?contains(@, '${{ env.STACK_NAME }}')]" \
                --output table || true
              
              exit 0
            elif [[ "$STACK_STATUS" == *"FAILED"* || "$STACK_STATUS" == *"ROLLBACK"* ]]; then
              echo "‚ùå Error en el despliegue. Estado final: $STACK_STATUS"
              
              echo "üìã √öltimos eventos del stack:"
              aws cloudformation describe-stack-events \
                --stack-name ${{ env.STACK_NAME }} \
                --query 'StackEvents[0:5].[ResourceStatus,ResourceStatusReason,LogicalResourceId]' \
                --output table
              
              echo "‚ö†Ô∏è Recursos que pudieron causar el fallo:"
              aws cloudformation list-stack-resources \
                --stack-name ${{ env.STACK_NAME }} \
                --query 'StackResourceSummaries[?ResourceStatus!=`CREATE_COMPLETE`].[LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
                --output table
              
              exit 1
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "‚è≥ Esperando $RETRY_INTERVAL segundos antes del siguiente intento..."
              sleep $RETRY_INTERVAL
            fi
          done
          
          echo "‚ùå Timeout esperando la finalizaci√≥n del stack"
          exit 1

      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "üßπ Limpiando recursos en caso de fallo..."
          
          # Guardar logs antes de limpiar
          aws cloudformation describe-stack-events \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'StackEvents[].[Timestamp,ResourceStatus,ResourceStatusReason]' \
            --output table > stack_events.log || true
          
          # Intentar eliminar el stack si existe
          aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }} || true
          
          echo "üìã Los eventos del stack han sido guardados en stack_events.log"
          echo "‚ùå El despliegue fall√≥. Por favor, revise los logs para m√°s detalles."